syntax = "proto3";

package tycho.evm.v1;

// A small struct for the block.
message Block {
  // The blocks hash.
  bytes hash = 1;
  // The parent blocks hash.
  bytes parent_hash = 2;
  // The block number.
  uint64 number = 3;
  // The block validation timestamp.
  uint64 ts = 4;
}

// A small struct describing a transaction.
message Transaction {
  // The transaction hash.
  bytes hash = 1;
  // The sender of the transaction.
  bytes from = 2;
  // The receiver of the transaction.
  bytes to = 3;
  // The transactions index within the block.
  uint64 index = 4;
}

// A key value entry into contract storage.
message ContractSlot {
  // A contracts storage slot.
  bytes slot = 2;
  // The new value for this storage slot.
  bytes value = 3;
}

// Enum to specify the type of a change.
enum ChangeType {
  CHANGE_TYPE_UNSPECIFIED = 0;
  CHANGE_TYPE_UPDATE = 1;
  CHANGE_TYPE_CREATION = 2;
  CHANGE_TYPE_DELETION = 3;
}

// Changes made to a single contracts state.
message ContractChange {
  // the contracts address
  bytes address = 1;
  // The new balance of the contract, empty bytes indicates no change.
  bytes balance = 2;
  // The new code of the contract, empty bytes indicates no change
  bytes code = 3;
  // The changes to this contracts slots, empty sequence indicates no change.
  repeated ContractSlot slots = 4;
  // Whether this is an update, a creation or a deletion.
  ChangeType change = 5;
}

// A protocol component is e.g. a swap pair or pool, stability module, etc.
message ProtocolComponent {
  // A unique id for this component (unique within the protocol).
  bytes id = 1;
  // An array of token addresses this component provides functionalities over.
  repeated bytes tokens = 2;
  // An array of contracts involved with this component.
  repeated bytes contracts = 3;
}

// A change in ERC20 token balance.
message BalanceChange {
  // The address of the token that had a balance change.
  bytes token = 1;
  // The new balance of the component.
  bytes balance = 2;
  // The component id to attribute the balance change to.
  bytes component_id = 3;
}

// A set of changes aggregated by transaction.
message TransactionChanges {
  // The transaction instance that results in the changes.
  Transaction tx = 1;
  // Contains the changes induced by the above transaction,
  // aggregated on a per-contract basis
  repeated ContractChange contract_changes = 2;
  // An array of newly added components.
  repeated ProtocolComponent components = 3;
  // An array of balance changes to components.
  repeated BalanceChange tvl = 4;
}

// A set of transaction changes within a single block.
message BlockContractChanges {
  // The block for which these changes are collectively computed.
  Block block = 1;
  // The set of transaction changes observed in the specified block.
  repeated TransactionChanges changes = 2;
}
